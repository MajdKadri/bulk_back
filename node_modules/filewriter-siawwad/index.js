const fs = require('fs').promises;
const fss = require('fs');
const path = require('path');

let logDir = "";
let currentLogFile;
let lastLogFileCreationTime;
let firstTime;
let secondTime;
let duration;

const createLogDirecory = (logPath) => {
    try {
        if (!fss.existsSync(logPath)) {
            fss.mkdirSync(logPath);
            logDir = logPath;
        }
    } catch (err) {
        throw new Error("exception while creating log directory: " + String(logPath))
    }
}

const month = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec"];
const createNewLogFile = async () => {
    const timestamp = new Date();
    const filename = `Log-${timestamp.getFullYear()}-${month[timestamp.getMonth()]}-${timestamp.getDate()} -T ${timestamp.getHours()}.log`;
    const filePath = path.join(logDir, filename);
    if (fss.existsSync(filePath)) {
        lastLogFileCreationTime = timestamp.getHours();
        return filePath;
    }
    await fs.writeFile(filePath, '');
    lastLogFileCreationTime = timestamp.getHours();
    return filePath;
};

const setLogDir = (dir) => {
    logDir = dir;
};

const shouldCreateNewLogFile = () => {
    const now = new Date;
    return !currentLogFile || now.getHours() != lastLogFileCreationTime;
};

const writeToFile = async (filePath, data) => {
    await fs.appendFile(filePath, data + '\n');
};

const processDataAsync = async (data) => {
    if (!currentLogFile || shouldCreateNewLogFile()) {
        currentLogFile = await createNewLogFile();
    }
    await writeToFile(currentLogFile, data);
};

const logData = async (data, type = 'log') => {
    let tempData = data;
    let finalData;
    if (type === 'log') {
        const timestamp = new Date();
        const currentDate = `${timestamp.getHours()}:${timestamp.getMinutes()}:${timestamp.getSeconds()}`;
        finalData = `${currentDate}\t${tempData}`;
    }
    else finalData = tempData;
    await processDataAsync(String(finalData));
};

const stratTimer = () => {
    firstTime = Date.now() / 1000;
};

const endTimer = async (data) => {
    secondTime = Date.now() / 1000;
    duration = secondTime - firstTime;
    await logData(`${data}: ${duration} seconds.`, 'timer');
};

module.exports = {
    setLogDir,
    logData,
    stratTimer,
    endTimer,
    createLogDirecory,
};